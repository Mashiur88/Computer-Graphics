#include <cstdio>
#include <GL/gl.h>
#include <GL/glut.h>
#include <GL/glu.h>
int flag=0;
GLfloat position = 0.0f;
GLfloat position1= 1.0f;
GLfloat position2=1.0f;
GLfloat position3=1.0f;
GLfloat position4 =-0.5f;

GLfloat speed = 0.1f;
GLfloat speed1 = 0.15f;
GLfloat speed2 = 0.2f;
void update(int value) {

    if(position1 < -1.0 && flag!=1)
    {
          position1 = 1.2f;
    }
    if(position2 < -1.0 && flag!=2)
    {
          position2 = 1.2f;
    }
    if(position3 < -1.0 && flag!=3)
    {
        position3 = 1.2f;

    }
       position1 -= speed;
       position2 -= speed1;
       position3 -= speed2;

	glutPostRedisplay();


	glutTimerFunc(100, update, 0);
}
void update1(int value) {

     if(position4>1.0f)
     {
        position4=-0.01f;
        return;
     }
      position4+=speed1;

    glutTimerFunc(100, update1, 0);
}



void init() {
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

void handleMouse(int button, int state, int x, int y) {
	if (button == GLUT_LEFT_BUTTON)
	{
		if (state == GLUT_DOWN)
		{
			speed += 0.1f;
			printf("clicked at (%d, %d)\n", x, y);
		}
	}

	glutPostRedisplay();
}

void handleKeypress(unsigned char key, int x, int y) {

	switch (key) {

case 'a':
    speed = 0.0f;
    break;
case 'w':
    speed += 0.1f;
    break;
case 'l':
    position+=0.1f;
    break;
case 'r':
    position-=0.1f;
    break;
case 'f':
      glutTimerFunc(1000,update1,0);
    if(position<-0.6&&position>-0.8)
        flag=1;
    else if(position<0.1f&& position>-0.1)
        flag=3;
    else if(position>0.6&& position<0.8)
        flag=2;
     break;




glutPostRedisplay();


	}
}


void display() {
   glClear(GL_COLOR_BUFFER_BIT);
   glLoadIdentity();
glPushMatrix();
glTranslatef(position,0.0f, 0.0f);
   glBegin(GL_QUADS);
      glColor3f(1.0f, 0.0f, 0.0f);
      glVertex2f(-0.3f, -.98f);
      glVertex2f( 0.3f, -.98f);
      glVertex2f( 0.3f, -.9f);
      glVertex2f(-0.3f, -.9f);
   glEnd();
    glBegin(GL_QUADS);
      glColor3f(0.0f, 0.0f, 1.0f);
      glVertex2f(-0.2f, -0.9f);
      glVertex2f( 0.2f, -0.9f);
      glVertex2f( 0.2f, -0.6f);
      glVertex2f(-0.2f, -0.6f);
   glEnd();
   glBegin(GL_QUADS);
      glColor3f(1.0f, 1.0f, 1.0f);
      glVertex2f(-0.05f, -0.6f);
      glVertex2f( 0.05f, -0.6f);
      glVertex2f( 0.05f, -0.5f);
      glVertex2f(-0.05f, -0.5f);
   glEnd();
glPopMatrix();

glPushMatrix();
glTranslatef(0.0f,position1, 0.0f);
   glBegin(GL_TRIANGLES);
      glColor3f(0.5f, 0.0f, 0.0f);
      glVertex2f(-0.60f,.98f);
      glVertex2f(-0.70f, .80f);
      glVertex2f(-0.80f, .98f);
   glEnd();

glPopMatrix();

glPushMatrix();
glTranslatef(0.0f,position3, 0.0f);
   glBegin(GL_TRIANGLES);
      glColor3f(0.0f, 0.5f, 0.0f);
      glVertex2f(-0.10f,.98f);
      glVertex2f(0.00f, .80f);
      glVertex2f(0.10f, .98f);
   glEnd();

glPopMatrix();

glPushMatrix();
glTranslatef(0.0f,position2, 0.0f);
   glBegin(GL_TRIANGLES);
      glColor3f(0.0f, 0.0f, 0.5f);
      glVertex2f(0.60f,.98f);
      glVertex2f(0.70f, .80f);
      glVertex2f(0.80f, .98f);
   glEnd();

glPopMatrix();

glPushMatrix();
glTranslatef(position,position4,0.0f);
   glBegin(GL_QUADS);
      glColor3f(1.0f, 1.0f, 1.0f);
      glVertex2f(-0.05f, -0.6f);
      glVertex2f( 0.05f, -0.6f);
      glVertex2f( 0.05f, -0.5f);
      glVertex2f(-0.05f, -0.5f);

   glEnd();

glPopMatrix();


   glFlush();
}



int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitWindowSize(320, 320);
   glutInitWindowPosition(50, 50);
   glutCreateWindow("Basic Animation");
   glutDisplayFunc(display);
   init();
   glutKeyboardFunc(handleKeypress);
   glutMouseFunc(handleMouse);
   glutTimerFunc(1000, update, 0);
   glutMainLoop();
   return 0;
}
